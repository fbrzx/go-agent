openapi: 3.0.3
info:
  title: go-agent API
  version: 1.0.0
  description: |
    HTTP layer exposing the existing go-agent workflows (ingest, chat, clear)
    as JSON endpoints.
servers:
  - url: http://localhost:8080
paths:
  /healthz:
    get:
      summary: Health check
      operationId: healthz
      responses:
        '200':
          description: Service is healthy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '405':
          description: Method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /openapi.yaml:
    get:
      summary: Download the OpenAPI document
      operationId: openapiDocument
      responses:
        '200':
          description: OpenAPI specification in YAML format.
          content:
            application/yaml:
              schema:
                type: string
        '405':
          description: Method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/ingest:
    post:
      summary: Ingest supported documents (Markdown, PDF, CSV) from disk.
      operationId: ingestDocuments
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngestRequest'
      responses:
        '200':
          description: Ingestion completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Invalid request payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Ingestion failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/ingest/upload:
    post:
      summary: Upload and ingest a single supported document immediately.
      operationId: ingestUpload
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              additionalProperties: false
              properties:
                document:
                  type: string
                  format: binary
                  description: Document to ingest (.md, .markdown, .pdf, .csv).
              required:
                - document
      responses:
        '200':
          description: Document ingested successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestUploadResponse'
        '400':
          description: Invalid upload payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Ingestion failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/chat:
    post:
      summary: Ask the agent a question using previously ingested knowledge.
      operationId: chat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      responses:
        '200':
          description: Chat answer and supporting sources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'
        '400':
          description: The question is missing or malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Chat workflow failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/chat/stream:
    post:
      summary: Stream a chat response chunk-by-chunk using Server-Sent Events.
      operationId: chatStream
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      responses:
        '200':
          description: Server-Sent Events stream containing `chunk`, `final`, and `done` events.
          content:
            text/event-stream:
              schema:
                type: string
              examples:
                sample:
                  summary: SSE event sequence
                  value: |
                    event: chunk
                    data: {"content":"Hello"}

                    event: final
                    data: {"answer":"Hello world","sources":[],"history":[]}

                    event: done
                    data: {"message":"complete"}
        '400':
          description: The question is missing or malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Chat workflow failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/clear:
    post:
      summary: Clear ingested RAG data from Postgres and Neo4j.
      operationId: clearData
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClearRequest'
      responses:
        '200':
          description: Data deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Confirmation flag missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Delete operation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    MessageResponse:
      type: object
      additionalProperties: false
      properties:
        message:
          type: string
      required:
        - message
    ErrorResponse:
      type: object
      additionalProperties: false
      properties:
        error:
          type: string
      required:
        - error
    IngestRequest:
      type: object
      additionalProperties: false
      properties:
        dir:
          type: string
          description: Optional override for the documents directory. Defaults to DATA_DIR.
    IngestUploadResponse:
      type: object
      additionalProperties: false
      properties:
        message:
          type: string
        document:
          $ref: '#/components/schemas/UploadedDocument'
      required:
        - message
        - document
    UploadedDocument:
      type: object
      additionalProperties: false
      properties:
        title:
          type: string
        path:
          type: string
        format:
          type: string
          enum: [markdown, pdf, csv]
          description: Detected document format.
        chunks:
          type: integer
          minimum: 0
          description: Number of chunks written to storage.
      required:
        - title
        - path
        - format
        - chunks
    ChatRequest:
      type: object
      additionalProperties: false
      properties:
        question:
          type: string
          description: Natural language question for the agent.
        limit:
          type: integer
          minimum: 1
          default: 5
          description: Maximum number of similar chunks to retrieve.
        sections:
          type: array
          items:
            type: string
          description: Optional section filters.
        topics:
          type: array
          items:
            type: string
          description: Optional topic filters.
        history:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
          description: Optional conversation history (user/assistant turns) to maintain context.
      required:
        - question
    ChatResponse:
      type: object
      additionalProperties: false
      properties:
        answer:
          type: string
        sources:
          type: array
          items:
            $ref: '#/components/schemas/ChatSource'
        history:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
          description: Updated conversation history including the latest turn.
      required:
        - answer
        - sources
    ChatMessage:
      type: object
      additionalProperties: false
      properties:
        role:
          type: string
          enum: [system, user, assistant]
        content:
          type: string
      required:
        - role
        - content
    ChatSource:
      type: object
      additionalProperties: false
      properties:
        documentId:
          type: string
        title:
          type: string
        path:
          type: string
        snippet:
          type: string
        score:
          type: number
          format: double
        insight:
          $ref: '#/components/schemas/ChatDocumentInsight'
      required:
        - documentId
        - title
        - path
        - snippet
        - score
        - insight
    ChatDocumentInsight:
      type: object
      additionalProperties: false
      properties:
        chunkCount:
          type: integer
        folders:
          type: array
          items:
            type: string
        sections:
          type: array
          items:
            $ref: '#/components/schemas/ChatSectionInfo'
        topics:
          type: array
          items:
            type: string
        relatedDocuments:
          type: array
          items:
            $ref: '#/components/schemas/ChatRelatedDocument'
      required:
        - chunkCount
        - folders
        - sections
        - topics
        - relatedDocuments
    ChatSectionInfo:
      type: object
      additionalProperties: false
      properties:
        title:
          type: string
        level:
          type: integer
        order:
          type: integer
      required:
        - title
        - level
        - order
    ChatRelatedDocument:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
        title:
          type: string
        path:
          type: string
        weight:
          type: number
          format: double
        similarity:
          type: number
          format: double
        reason:
          type: string
      required:
        - id
        - title
        - path
    ChatStreamChunk:
      type: object
      additionalProperties: false
      properties:
        content:
          type: string
          description: Partial assistant output chunk.
      required:
        - content
    ChatStreamFinal:
      type: object
      additionalProperties: false
      properties:
        answer:
          type: string
        sources:
          type: array
          items:
            $ref: '#/components/schemas/ChatSource'
        history:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
      required:
        - answer
        - sources
    ClearRequest:
      type: object
      additionalProperties: false
      properties:
        confirm:
          type: boolean
          const: true
          description: Must be set to true to acknowledge the destructive action.
      required:
        - confirm
