name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  GO_VERSION: '1.23'
  NODE_VERSION: '20'

jobs:
  # Job 1: Lint Go code
  lint-go:
    name: Lint Go Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.61.0

      - name: Run golangci-lint
        run: $(go env GOPATH)/bin/golangci-lint run --timeout 5m ./...

      - name: Check Go formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted correctly:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

  # Job 2: Lint Frontend code
  lint-frontend:
    name: Lint Frontend Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: ui/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('ui/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install frontend dependencies
        working-directory: ui
        run: npm ci

      - name: Check TypeScript types
        working-directory: ui
        run: npx tsc --noEmit

      - name: Check formatting (Prettier)
        working-directory: ui
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,css}"

  # Job 3: Build Backend
  build-backend:
    name: Build Go Application
    runs-on: ubuntu-latest
    needs: [lint-go]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Build application
        run: |
          mkdir -p bin
          go build -v -o bin/go-agent .

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: go-agent-binary
          path: bin/go-agent
          retention-days: 7

  # Job 4: Build Frontend
  build-frontend:
    name: Build React UI
    runs-on: ubuntu-latest
    needs: [lint-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: ui/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('ui/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: ui
        run: npm ci

      - name: Build UI
        working-directory: ui
        run: npm run build

      - name: Check build output
        run: |
          if [ ! -d "api/ui/dist" ]; then
            echo "Build failed: api/ui/dist directory not found"
            exit 1
          fi
          if [ ! -f "api/ui/dist/index.html" ]; then
            echo "Build failed: index.html not found"
            exit 1
          fi

      - name: Upload UI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ui-dist
          path: api/ui/dist
          retention-days: 7

  # Job 5: Unit Tests
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: [build-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run unit tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./tests/unit/...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.txt
          flags: unittests
          name: unit-tests
        continue-on-error: true

      - name: Generate coverage report
        run: go tool cover -html=coverage.txt -o coverage.html

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html
          retention-days: 7

  # Job 6: Integration Tests
  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]

    services:
      postgres:
        image: postgres:16.4
        env:
          POSTGRES_DB: go-agent
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: testpassword
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      neo4j:
        image: neo4j:5.24-community
        env:
          NEO4J_AUTH: neo4j/testpassword
          NEO4J_PLUGINS: '["apoc"]'
        ports:
          - 7474:7474
          - 7687:7687
        options: >-
          --health-cmd "wget --no-verbose --tries=1 --spider http://localhost:7474 || exit 1"
          --health-interval 15s
          --health-timeout 10s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install pgvector extension
        run: |
          PGPASSWORD=testpassword psql -h localhost -U postgres -d go-agent -c "CREATE EXTENSION IF NOT EXISTS vector;"

      - name: Wait for Neo4j to be fully ready
        run: |
          echo "Waiting for Neo4j to be ready..."
          for i in {1..30}; do
            if curl -s http://localhost:7474 > /dev/null; then
              echo "Neo4j is ready!"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done

      - name: Set up test environment
        run: |
          echo "POSTGRES_DSN=postgresql://postgres:testpassword@localhost:5432/go-agent?sslmode=disable" >> $GITHUB_ENV
          echo "NEO4J_URI=neo4j://localhost:7687" >> $GITHUB_ENV
          echo "NEO4J_USERNAME=neo4j" >> $GITHUB_ENV
          echo "NEO4J_PASSWORD=testpassword" >> $GITHUB_ENV
          echo "RUN_DB_INTEGRATION_TESTS=1" >> $GITHUB_ENV

      - name: Run integration tests
        env:
          POSTGRES_DSN: postgresql://postgres:testpassword@localhost:5432/go-agent?sslmode=disable
          NEO4J_URI: neo4j://localhost:7687
          NEO4J_USERNAME: neo4j
          NEO4J_PASSWORD: testpassword
          RUN_DB_INTEGRATION_TESTS: 1
        run: go test -v -race -coverprofile=integration-coverage.txt -covermode=atomic ./tests/integration/...

      - name: Upload integration coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./integration-coverage.txt
          flags: integrationtests
          name: integration-tests
        continue-on-error: true

  # Job 7: Docker Build Test
  docker-build:
    name: Test Docker Build
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: go-agent:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run -d --name go-agent-test go-agent:test serve &
          sleep 5
          docker logs go-agent-test || true
          docker rm -f go-agent-test || true

  # Job 8: Docker Compose Stack Test
  docker-compose-test:
    name: Test Docker Compose Stack
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create test environment file
        run: |
          cat > .env << EOF
          POSTGRES_PASSWORD=testpassword
          NEO4J_PASSWORD=testpassword
          LLM_PROVIDER=ollama
          EMBEDDING_PROVIDER=ollama
          LLM_MODEL=llama3.1:8b
          EMBEDDING_MODEL=nomic-embed-text
          EMBEDDING_DIMENSION=768
          EOF

      - name: Start Docker Compose stack (infrastructure only)
        run: |
          # Start only postgres and neo4j for testing (skip ollama - too heavy for CI)
          docker compose up -d postgres neo4j

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for PostgreSQL..."
          for i in {1..30}; do
            if docker compose exec -T postgres pg_isready -U postgres; then
              echo "PostgreSQL is ready!"
              break
            fi
            sleep 2
          done

          echo "Waiting for Neo4j..."
          for i in {1..30}; do
            if curl -s http://localhost:7474 > /dev/null; then
              echo "Neo4j is ready!"
              break
            fi
            sleep 2
          done

      - name: Verify PostgreSQL connection
        run: |
          docker compose exec -T postgres psql -U postgres -d go-agent -c "SELECT version();"

      - name: Verify Neo4j connection
        run: |
          curl -u neo4j:testpassword http://localhost:7474/db/neo4j/tx/commit \
            -H "Content-Type: application/json" \
            -d '{"statements":[{"statement":"RETURN 1 as result"}]}'

      - name: Show service logs
        if: always()
        run: docker compose logs

      - name: Tear down Docker Compose stack
        if: always()
        run: docker compose down -v

  # Job 9: Code Quality Summary
  code-quality:
    name: Code Quality Summary
    runs-on: ubuntu-latest
    needs: [lint-go, lint-frontend, unit-tests, integration-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
        continue-on-error: true

      - name: Generate summary
        run: |
          echo "## Code Quality Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Linting: Passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Unit Tests: Passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Integration Tests: Passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Docker Build: Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Coverage reports have been uploaded as artifacts." >> $GITHUB_STEP_SUMMARY

  # Job 10: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

      - name: Run Go security checker
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          $(go env GOPATH)/bin/gosec -fmt json -out gosec-results.json ./...
        continue-on-error: true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            trivy-results.sarif
            gosec-results.json
          retention-days: 30
        continue-on-error: true
